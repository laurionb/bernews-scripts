#!/usr/bin/python
import argparse
import boto
import boto.ec2
import boto.ec2.cloudwatch
import os
import sys
import time
import urllib2
import dateutil.parser
import dateutil.tz

from datetime import datetime
from operator import attrgetter

"""Call a function, retrying on failures"""
def retry(f, retries=3):
    failures = 0
    while True:
        try:
            result = f()            
            return result
        except Exception as e:
            failures = failures + 1
            if failures > retries:
                raise         
            time.sleep(1)    
    
"""Call a boto connection function using the AWS environment variables. This supports both
ordinary and delegated credentials"""
def connect_to(region, f):
    if (None <> os.environ.get('AWS_DELEGATION_TOKEN')):
        return f(region, aws_access_key_id=os.environ['AWS_ACCESS_KEY'], aws_secret_access_key=os.environ['AWS_SECRET_KEY'], security_token = os.environ['AWS_DELEGATION_TOKEN'])
    elif (None <> os.environ.get('AWS_ACCESS_KEY')):
        return f(region, aws_access_key_id=os.environ['AWS_ACCESS_KEY'], aws_secret_access_key=os.environ['AWS_SECRET_KEY'])
    else:
        return f(region)

"""Parse the commandline"""
def parse_commandline():
    parser = argparse.ArgumentParser(description='Determine the age of EBS volume snapshots')
    parser.add_argument('--region', default='us-east-1', help='the region the snapshot is in. Defaults to us-east-1.')
    parser.add_argument('--put-metric-data', action='store_true', help='push the data to CloudWatch')
    parser.add_argument('name', nargs='+', help='the name of the snapshot (e.g. "monitoring").')
    args = parser.parse_args()
    return args

"""Get the start time of the most recent completed snapshot
with the given name."""
def get_snapshot_start_time(ec2, name):
    snapshots = retry(lambda: ec2.get_all_snapshots(filters={'tag:Name': name, 'status': 'completed'}))
    snapshots = sorted(snapshots, key=attrgetter('start_time'), reverse=True)
    most_recent_snapshot = snapshots[0]
    start_time = dateutil.parser.parse(most_recent_snapshot.start_time)
    return start_time

def main(args):
    cloudwatch_namespace = 'System/Backups'
    cloudwatch_metric_name = 'BackupAge'
    cloudwatch_units = 'Seconds'

    args = parse_commandline()
    ec2 = connect_to(args.region, boto.ec2.connect_to_region)
    cloudwatch = connect_to('us-east-1', boto.ec2.cloudwatch.connect_to_region)
    for n in args.name:
        start_time = get_snapshot_start_time(ec2, n)
        now = datetime.now(dateutil.tz.tzutc())
        age = now - start_time
        seconds = age.seconds + (age.days * 24 * 3600)
        backup_name = '%s/%s' % (args.region, n)
        print '%s: %s' % (backup_name, seconds)
        cloudwatch_dimensions = { 'BackupName': backup_name }
        if args.put_metric_data:
            cloudwatch.put_metric_data(cloudwatch_namespace, cloudwatch_metric_name, value=seconds, unit=cloudwatch_units, dimensions=cloudwatch_dimensions)

if __name__ == "__main__":
    main(sys.argv)
