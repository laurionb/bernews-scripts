#!/usr/bin/python
import argparse
import boto
import boto.ec2
import boto.ec2.cloudwatch
import getpass
import logging
import os
import socket
import string
import sys
import time
import urllib2

from boto.ec2.blockdevicemapping import EBSBlockDeviceType, BlockDeviceMapping, BlockDeviceType
from datetime import datetime
from operator import attrgetter

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# format with the time
formatter = logging.Formatter('%(asctime)s %(levelname)s %(name)s %(message)s')
# log to a file
fh = logging.FileHandler('aws.log')
fh.setLevel(logging.DEBUG)
fh.setFormatter(formatter)
logger.addHandler(fh)
# also log boto errors to the file
logging.getLogger('boto').addHandler(fh)

"""Generate a beep sound"""
def beep():
    print '\a'
    
"""Prints a string to the console and logs it"""
def print_and_log(s):
    print s
    logger.info(s)

"""Prints a string to the console and logs it"""
def print_error_and_log(s):
    print 'ERROR: ' + s
    logger.error(s)
    
"""Print a prompt to the screen. If the user enters q or n then an exception is thrown"""
def prompt(p):
    beep()
    i = raw_input('### ' + p + '. Press ENTER to continue. ### ').lower()
    if str.startswith(i, 'q') or str.startswith(i, 'n'):
        raise Exception('Cancelled')
    
"""Call a function, retrying on failures"""
def retry(f, retries=1):
    failures = 0
    while True:
        try:
            result = f()            
            return result
        except Exception as e:
            failures = failures + 1
            if failures > retries:
                print_and_log('Failed after {0} retries'.format(failures))
                logger.error('Failed after {0} retries with exception {1}'.format(failures, e))
                raise         
            logger.warning('Got exception {0} ({1} failures total). Retrying...'.format(e.__class__.__name__, failures))
            time.sleep(2)

def get_url(url):
    logger.debug('Getting {0}'.format(url))
    data = retry(lambda: urllib2.urlopen(url, timeout=10).read(), retries=150)
    print_and_log('Got {0} bytes of data from {1}'.format(len(data), url))
            
"""Call a boto connection function using the AWS environment variables. This supports both
ordinary and delegated credentials"""
def connect_to_aws(f, region, creds):
    if ('AWS_DELEGATION_TOKEN' in creds):
        return f(region, aws_access_key_id = creds['AWS_ACCESS_KEY'], aws_secret_access_key = creds['AWS_SECRET_KEY'], security_token = creds['AWS_DELEGATION_TOKEN'])
    else:
        return f(region, aws_access_key_id = creds['AWS_ACCESS_KEY'], aws_secret_access_key = creds['AWS_SECRET_KEY'])

"""Get temporary AWS credentials"""
def get_aws_credentials(access_key, secret_key):
    iam = boto.connect_iam(access_key, secret_key)
    user = retry(lambda: iam.get_user(), 2)['get_user_response']['get_user_result']['user']['user_name']
    mfa_serial_number = retry(lambda: iam.get_all_mfa_devices(user))['list_mfa_devices_response']['list_mfa_devices_result']['mfa_devices'][0]['serial_number']
    print 'Enter the MFA token for MFA device {0} (user: {1})'.format(mfa_serial_number, user) # just print to the console, no logging
    mfa_token = getpass.getpass('Token: ')
    sts = boto.connect_sts(access_key, secret_key)
    token = retry(lambda: sts.get_session_token(duration = 3600, force_new = True, mfa_serial_number = mfa_serial_number, mfa_token = mfa_token), 2)
    creds = {'AWS_ACCESS_KEY': token.access_key, 'AWS_SECRET_KEY': token.secret_key, 'AWS_DELEGATION_TOKEN': token.session_token}
    return creds

"""Parse the commandline"""
def parse_commandline():
    parser = argparse.ArgumentParser(description='Clone an EC2 machine from its most recent backup.')
    parser.add_argument('--aws-access-key', metavar='KEY', help='AWS Access Key ID. Defaults to the value of the AWS_ACCESS_KEY environment variable (if set).')
    parser.add_argument('--aws-secret-key', metavar='KEY', help='AWS Secret Access Key. Defaults to the value of the AWS_SECRET_KEY environment variable (if set).')
    parser.add_argument('--availability-zone', metavar='ZONE', help='Specifies the availability zone to launch the new instance in. Defaults to the same availability zone as the current instance.')
    parser.add_argument('--instance-type', metavar='TYPE', help='The type of instance to create. Defaults to the same type as the current instance.')
    parser.add_argument('--kernel', help='Specifies the ID of the kernel to launch the new instance with. Defaults to the same kernel as the current instance.')
    parser.add_argument('--key', metavar='KEYPAIR', dest='key_name', help='Specifies the name of the key pair to use when launching the new instance. Defaults to the same key pair as the current instance.')
    parser.add_argument('--group', metavar='GROUP', dest='security_group', help='Specifies the security group within which the new instance should be run. Defaults to the same security group as the current instance.')
    parser.add_argument('--region', default='us-east-1', help='The region the instance is in. Defaults to us-east-1.')
    parser.add_argument('--size', help='The size of the volume, in GiBs. Defaults to the same size as the snapshot.')
    parser.add_argument('--snapshot', help='The snapshot to use. Defaults to the most recent snapshot.')    
    parser.add_argument('--verbose', action='store_true', help='Turns on verbose logging.')    
    parser.add_argument('host', help='The DNS name of the instance to restore')
    args = parser.parse_args()
    logger.info(args)
    return args
    
"""Get environment variables that can be used to fill in missing arguments"""    
def get_env_vars(args):
    if (None == args.aws_access_key):
        if ('AWS_ACCESS_KEY' in os.environ):
            args.aws_access_key = os.environ['AWS_ACCESS_KEY']
        else:
            sys.exit('AWS Access Key ID not specified')
    if (None == args.aws_secret_key):
        if ('AWS_SECRET_KEY' in os.environ):
            args.aws_secret_key = os.environ['AWS_SECRET_KEY']
        else:
            sys.exit('AWS Secret Access Key not specified')
    return args
    
"""Turn a hostname into an IP address"""
def get_ip_address(hostname):
    ip_address = retry(lambda: socket.gethostbyname(hostname))
    logger.debug('{0} has IP address {1}'.format(hostname, ip_address))
    return ip_address

"""Validate the arguments that will be used to launch a new instance"""    
def validate_args(ec2, args):
    try:
        z = retry(lambda: ec2.get_all_zones([args.availability_zone]))[0]
        print_and_log('    Availability zone {0} is {1}'.format(z.name, z.state))
    except:
        print_error_and_log('Availability zone {0} not found'.format(args.availability_zone))
        raise
    try:
        retry(lambda: ec2.get_all_key_pairs([args.key_name]))
        print_and_log('    Found key pair {0}'.format(args.key_name))
    except:
        print_error_and_log('Key pair {0} not found'.format(args.key_name))
        raise
    try:
        retry(lambda: ec2.get_all_kernels([args.kernel]))
        print_and_log('    Found kernel {0}'.format(args.kernel))
    except:
        print_error_and_log('Kernel {0} not found'.format(args.kernel))
        raise
    try:
        # To see if an instance type exists we'll look to see if there are reserved
        # instances of that type
        retry(lambda: ec2.get_all_reserved_instances_offerings(instance_type = args.instance_type))
        print_and_log('    Found instance type {0}'.format(args.instance_type))
    except:
        print_error_and_log('Instance type {0} not found'.format(args.instance_type))
        raise
    try:
        retry(lambda: ec2.get_all_security_groups([args.security_group]))
        print_and_log('    Found security group {0}'.format(args.security_group))
    except:
        print_error_and_log('Security group {0} not found'.format(args.security_group))
        raise
    if args.size < 8:
        raise Exception('Size {0} is too small'.format(args.size))

"""Call function f on all dimensions that contain match"""
def update_cloudwatch_dimensions(dimensions, match, f):
    for (k, v) in dimensions.items():
        if isinstance(v,list):
            if -1 != string.find(v[0], match):
                dimensions[k][0] = f(v[0])
                return True
        elif -1 != string.find(v, match):
                dimensions[k] = f(v)
                return True
    return False

comp_map = {'>': 'GreaterThanThreshold', '<': 'LessThanThreshold', '<=': 'LessThanThreshold', '>=': 'GreaterThanOrEqualToThreshold'}
    
"""Update CloudWatch alarms, updating the dimensions"""
def update_cloudwatch_alarms(cw, old, new):
    for alarm in retry(lambda: cw.describe_alarms()):
        alarm.comparison = comp_map[alarm.comparison]
        logger.debug(alarm)
        if update_cloudwatch_dimensions(alarm.dimensions, old, lambda s: string.replace(s, old, new)):
            print_and_log('updating {0} ({1})'.format(alarm, alarm.dimensions))
            retry(lambda: cw.create_alarm(alarm))

"""Print CloudWatch alarms with dimensions that contain the string"""
def print_matching_cloudwatch_alarms(cw, match):
    for alarm in retry(lambda: cw.describe_alarms()):
        alarm.comparison = comp_map[alarm.comparison]
        logger.debug(alarm)
        if update_cloudwatch_dimensions(alarm.dimensions, match, lambda s: s):
            print_and_log('    {0} ({1})'.format(alarm, alarm.dimensions))
            
"""Tag a resource"""            
def tag_resource(ec2, resource_id, tags):
    logger.debug('Tagging {0} with {1}'.format(resource_id, tags))
    retry(lambda: ec2.create_tags([resource_id], tags))
    logger.debug('Tagged {0} with {1}'.format(resource_id, tags))
    
"""Format tags as a string"""    
def format_tags(tags):
    return ','.join(['{0}:{1}'.format(t.name,t.value) for t in tags])

"""Add ephemeral drives to the block mapping list. We rely on the fact that these
are ignored if the ephemeral drives don't exist."""    
def add_ephemeral_drives_to_block_map(block_map):
    sdb1 = BlockDeviceType()
    sdc1 = BlockDeviceType()
    sdd1 = BlockDeviceType()
    sde1 = BlockDeviceType()
    sdb1.ephemeral_name = 'ephemeral0'
    sdc1.ephemeral_name = 'ephemeral1'
    sdd1.ephemeral_name = 'ephemeral2'
    sde1.ephemeral_name = 'ephemeral3'
    block_map['/dev/sdb1'] = sdb1
    block_map['/dev/sdc1'] = sdc1
    block_map['/dev/sdd1'] = sdd1
    block_map['/dev/sde1'] = sde1
    
def main():
    args = parse_commandline()
    
    if args.verbose:
        logger.setLevel(logging.DEBUG)
        logging.getLogger('boto').setLevel(logging.INFO)
        logger.debug('Verbose logging enabled')
    
    date = datetime.utcnow().isoformat()
    logger.debug('date = {0}'.format(date))
    print_and_log('Time: {0}'.format(time.strftime('%Y-%m-%dT%H:%M:%S', time.gmtime())))
    
    args = get_env_vars(args)            
    print_and_log('Region: {0}'.format(args.region))
        
    credentials = get_aws_credentials(args.aws_access_key, args.aws_secret_key)

    print_and_log('*** Restoring latest backup of {0}:'.format(args.host))
    
    # Get the IP address of the host we are going to restore
    ip_address = get_ip_address(args.host)
    print_and_log('                  EIP: {0}'.format(ip_address))

    # Connect to AWS    
    ec2 = connect_to_aws(boto.ec2.connect_to_region, args.region, credentials)
    cw = connect_to_aws(boto.ec2.cloudwatch.connect_to_region, args.region, credentials)    
    
    # Find the EIP for that address    
    eip = retry(lambda: ec2.get_all_addresses(filters={'public-ip': ip_address}))[0]
    old_instance_id = eip.instance_id
    print_and_log('             Instance: {0}'.format(old_instance_id))

    # Get information about the instance
    instance_name = retry(lambda: ec2.get_all_tags(filters={'resource-id': old_instance_id, 'key': 'Name'}))[0].value
    print_and_log('                 Name: {0}'.format(instance_name))
    
    old_instance = retry(lambda: ec2.get_all_instances([old_instance_id]))[0].instances[0]
    print_and_log('                State: {0}'.format(old_instance.state))
    print_and_log('        Instance Type: {0}'.format(old_instance.instance_type))
    print_and_log('    Availability Zone: {0}'.format(old_instance.placement))
    print_and_log('               Kernel: {0}'.format(old_instance.kernel))
    print_and_log('       Security Group: {0}'.format(old_instance.groups[0].name))
    print_and_log('              SSH Key: {0}'.format(old_instance.key_name))
    print_and_log('                 Tags: {0}'.format(format_tags(retry(lambda: ec2.get_all_tags(filters={'resource-id': old_instance.id})))))
    
    old_volume = retry(lambda: ec2.get_all_volumes(filters={'attachment.instance-id': old_instance_id}))[0]
    print_and_log('               Volume: {0}'.format(old_volume.id))
    print_and_log('        Volume Status: {0}'.format(old_volume.status))
    print_and_log('          Volume Size: {0}'.format(old_volume.size))
    print_and_log('          Volume Tags: {0}'.format(format_tags(retry(lambda: ec2.get_all_tags(filters={'resource-id': old_volume.id})))))

    # Find the snapshot to restore
    if None == args.snapshot:
        logger.debug('Finding most recent snapshot')
        snapshots = retry(lambda: ec2.get_all_snapshots(filters={'tag:Name': instance_name, 'status': 'completed'}))
        snapshots = sorted(snapshots, key=attrgetter('start_time'), reverse=True)
        logger.debug(snapshots)
    else:
        logger.debug('Finding user-specified snapshot {0}'.format(args.snapshot))
        snapshots = retry(lambda: ec2.get_all_snapshots([args.snapshot]))
    snapshot = snapshots[0]    

    print ''
    print_and_log('*** Backup:')
    print_and_log('             Snapshot: {0} \'{1}\''.format(snapshot.id, snapshot.description))
    print_and_log('        Snapshot Size: {0}'.format(snapshot.volume_size))    
    print_and_log('        Snapshot Date: {0}'.format(snapshot.start_time))
    print_and_log('      Snapshot Status: {0}'.format(snapshot.status))
    print_and_log('        Snapshot Tags: {0}'.format(format_tags(retry(lambda: ec2.get_all_tags(filters={'resource-id': snapshot.id})))))

    # Get the default arguments
    logger.debug('args before defaults applied: {0}'.format(args))
    args.instance_type = args.instance_type or old_instance.instance_type
    args.availability_zone = args.availability_zone or old_instance.placement
    args.kernel = args.kernel or old_instance.kernel
    args.key_name = args.key_name or old_instance.key_name
    args.security_group = args.security_group or old_instance.groups[0].name
    args.size = args.size or snapshot.volume_size
    logger.debug('args after defaults applied: {0}'.format(args))

    # Launch parameters
    print ''
    print_and_log('*** Launch parameters:')
    print_and_log('        Instance Type: {0}'.format(args.instance_type))
    print_and_log('    Availability Zone: {0}'.format(args.availability_zone))
    print_and_log('               Kernel: {0}'.format(args.kernel))
    print_and_log('              SSH Key: {0}'.format(args.key_name))
    print_and_log('       Security Group: {0}'.format(args.security_group))
    print_and_log('          Volume Size: {0}'.format(args.size))
     
    # Validate launch parameters
    print ''
    print_and_log('*** Validating launch parameters...')
    validate_args(ec2, args)
    
    print ''
    print_and_log('*** These CloudWatch alarms will be updated:')
    print_matching_cloudwatch_alarms(cw, old_instance.id)
    print_matching_cloudwatch_alarms(cw, old_volume.id)

    # Tags to apply to new resources
    tags = {
        'Name': instance_name,
        'Date': date,
        'Kernel': args.kernel,
        'Snapshot': '{0} ({1})'.format(snapshot.id, snapshot.start_time),
        'OldInstance': '{0}/{1}'.format(old_instance.id, old_volume.id),
        'CreatedBy': getpass.getuser()}
    logger.debug('tags={0}'.format(tags))
    # Tags to apply to retired resources
    retired_tags = {'Name': instance_name + '-retired', 'RetiredDate': date, 'RetiredBy': getpass.getuser()}
    logger.debug('retired_tags={0}'.format(retired_tags))
    
    # Ready to start
    print ''
    prompt('Ready to start')
    
    ami = None
    instance = None
    
    # Create the backup image. If anything fails here we will cleanup
    try:    
        print_and_log('Time: {0}'.format(time.strftime('%Y-%m-%dT%H:%M:%S', time.gmtime())))
        # AMI
        logger.debug('Registering the AMI')
        ebs = EBSBlockDeviceType()
        ebs.snapshot_id = snapshot.id
        ebs.size = args.size
        ebs.delete_on_termination = True
        block_map = BlockDeviceMapping()
        block_map['/dev/sda1'] = ebs
        add_ephemeral_drives_to_block_map(block_map)
        logger.debug(block_map)
        ami = retry(lambda: ec2.register_image(
            '{0}-{1}'.format(instance_name, snapshot.id),
            'restore-{0}-from-backup-{1}'.format(instance_name, snapshot.id),
            architecture='x86_64',
            kernel_id=args.kernel,
            root_device_name='/dev/sda1',
            block_device_map=block_map))
        print_and_log('                  AMI: {0}'.format(ami))
        tag_resource(ec2, ami, tags)
                
        # Instance
        logger.debug('Starting the instance')
        client_token = 'run-{0}-{1}'.format(ami, instance_name)
        logger.debug('Client token: \'{0}\''.format(client_token))    
        reservation = retry(lambda: ec2.run_instances(
            ami,
            key_name=args.key_name,
            security_groups=[args.security_group],
            instance_type=args.instance_type,
            placement=args.availability_zone,
            kernel_id=args.kernel,
            monitoring_enabled=True,
            client_token=client_token))
        instance = reservation.instances[0]
        print_and_log('             Instance: {0}'.format(instance.id))
        print_and_log('                State: {0}'.format(instance.state))
        print_and_log('        Instance Type: {0}'.format(instance.instance_type))
        print_and_log('    Availability Zone: {0}'.format(instance.placement))
        print_and_log('               Kernel: {0}'.format(instance.kernel))
        print_and_log('       Security Group: {0}'.format(instance.groups[0].name))
        print_and_log('              SSH Key: {0}'.format(instance.key_name))
        tag_resource(ec2, instance.id, tags)

        print_and_log('Waiting for instance...')
        while 'pending' == instance.state:
            logger.debug('Instance {0} has state {1}. Sleeping'.format(instance.id, instance.state))
            time.sleep(2)
            retry(lambda: instance.update(True))
        print_and_log('                State: {0}'.format(instance.state))
        print_and_log('           Public DNS: {0}'.format(instance.public_dns_name))
        print_and_log('          Private DNS: {0}'.format(instance.private_dns_name))
        
        logger.debug('Getting instance volume')
        volume = retry(lambda: ec2.get_all_volumes(filters={'attachment.instance-id': instance.id}))[0]
        print_and_log('               Volume: {0}'.format(old_volume.id))
        print_and_log('        Volume Status: {0}'.format(volume.status))
        print_and_log('          Volume Size: {0}'.format(volume.size))

        tag_resource(ec2, volume.id, tags)
                
        print_and_log('Checking {0}'.format(instance.public_dns_name))
        get_url('http://{0}/'.format(instance.public_dns_name))

        print ''
        prompt('Ready to move EIP {0} ({1}) to instance {2}'.format(ip_address, args.host, instance.public_dns_name))

        # Another check to make sure the instance didn't go away while we were waiting for input
        get_url('http://{0}/'.format(instance.public_dns_name))
        
        print_and_log('Time: {0}'.format(time.strftime('%Y-%m-%dT%H:%M:%S', time.gmtime())))
        print_and_log('Disabling API termination')
        retry(lambda: ec2.modify_instance_attribute(instance.id, 'disableApiTermination', True))
        
    except:
        print_error_and_log('Caught an exception, cleaning up...')
        if instance:
            print_and_log('Terminating {0}'.format(instance.id))
            retry(lambda: ec2.terminate_instances([instance.id]))
        raise
    finally:
        # We always want to get rid of the AMI
        if ami:
            print_and_log('Deregistering {0}'.format(ami))
            retry(lambda: ec2.deregister_image(ami))
    
    # At this point the new instance is running and available. Time to move the EIP over
    print_and_log('Moving EIP')
    retry(lambda: ec2.associate_address(instance_id=instance.id, public_ip=ip_address))

    # Move the CloudWatch alarms over
    print_and_log('Updating CloudWatch alarms')
    update_cloudwatch_alarms(cw, old_instance.id, instance.id)
    update_cloudwatch_alarms(cw, old_volume.id, volume.id)
    
    # Tag the old host
    print_and_log('Tagging old host')
    tag_resource(ec2, old_instance.id, retired_tags)
    tag_resource(ec2, old_volume.id, retired_tags)
    
    # Check the host now works
    print_and_log('Checking {0}'.format(ip_address))
    get_url('http://{0}/'.format(ip_address))
    print_and_log('Checking {0}'.format(args.host))
    get_url('http://{0}/'.format(args.host))
    
    # EIP failover isn't instant so we sleep
    print_and_log('Sleeping for three minutes...')
    time.sleep(180)

    # Check the host still works
    print_and_log('Checking {0}'.format(ip_address))
    get_url('http://{0}/'.format(ip_address))
    print_and_log('Checking {0}'.format(args.host))
    get_url('http://{0}/'.format(args.host))
    
    # Shutdown the old host
    print_and_log('Stopping old instance')
    retry(lambda: ec2.stop_instances([old_instance.id], force=True))

    # Check the host still works
    print_and_log('Checking {0}'.format(ip_address))
    get_url('http://{0}/'.format(ip_address))
    print_and_log('Checking {0}'.format(args.host))
    get_url('http://{0}/'.format(args.host))
    
    print ''
    retry(lambda: instance.update(True))
    print_and_log('*** SUCCESS')
    print_and_log('             Instance: {0}'.format(instance.id))
    print_and_log('                State: {0}'.format(instance.state))
    print_and_log('        Instance Type: {0}'.format(instance.instance_type))
    print_and_log('    Availability Zone: {0}'.format(instance.placement))
    print_and_log('               Kernel: {0}'.format(instance.kernel))
    print_and_log('       Security Group: {0}'.format(instance.groups[0].name))
    print_and_log('              SSH Key: {0}'.format(instance.key_name))
    print_and_log('                 Tags: {0}'.format(format_tags(retry(lambda: ec2.get_all_tags(filters={'resource-id': instance.id})))))

    retry(lambda: volume.update(True))
    print_and_log('               Volume: {0}'.format(volume.id))
    print_and_log('        Volume Status: {0}'.format(volume.status))
    print_and_log('          Volume Size: {0}'.format(volume.size))
    print_and_log('          Volume Tags: {0}'.format(format_tags(retry(lambda: ec2.get_all_tags(filters={'resource-id': volume.id})))))
    print_and_log('Time: {0}'.format(time.strftime('%Y-%m-%dT%H:%M:%S', time.gmtime())))
    
    beep()
    
if __name__ == "__main__":
    main()
