#!/bin/bash
#
# Restores the latest backup and moves the EIP over to the new machine.
# This depends on the external cloudwatch-describe-alarms and retry scripts.
if test -z "$1" || test -z "$2" || test -z "$3"
then
    echo "Usage: $0 [site] [instance-type] [az]"
    exit 1
fi

KERNEL=aki-88aa75e1
DATE=$(date '+%Y-%m-%d-%H%M%S')

LOG=/tmp/restore-from-backup.log

SITE=$1
INSTANCE_TYPE=$2
AZ=$3
CLIENT_TOKEN="$DATE-$SITE-$$"
echo "Logging to $LOG"
echo "$0 $*" > $LOG
date >> $LOG
echo "Restoring latest $SITE backup" | tee --append $LOG
echo "    availability-zone: $AZ" | tee --append $LOG
echo "        instance-type: $INSTANCE_TYPE" | tee --append $LOG 
echo "               kernel: $KERNEL" | tee --append $LOG 
echo "                 date: $DATE" | tee --append $LOG 
echo "         client token: $CLIENT_TOKEN" | tee --append $LOG

retry ec2-describe-availability-zones --filter zone-name=$AZ | grep AVAILABILITYZONE > /dev/null
if [ $? -ne 0 ]
then
    echo "Availability-zone $AZ doesn't exist"
    exit 1
fi

ADDRESS=`retry host -t A $SITE | tee --append $LOG | awk '{print $4}'`
if test -z "$ADDRESS"
then
    echo "Could not find IP address for $SITE" | tee --append $LOG
    exit 1
fi
echo "$SITE has IP address $ADDRESS" | tee --append $LOG

OLD_INSTANCE=`retry ec2-describe-addresses --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter public-ip=$ADDRESS | tee --append $LOG | awk '{print $3}'`
if test -z "$OLD_INSTANCE"
then
    echo "Could not find instance associated with address $ADDRESS" | tee --append $LOG
    exit 1
fi
echo "Current $SITE instance is $OLD_INSTANCE" | tee --append $LOG

NAME=`retry ec2-describe-tags --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter resource-id=$OLD_INSTANCE --filter key=Name | tee --append $LOG | awk '{print $5}'`
if test -z "$NAME"
then
    echo "Unable to determine name of instance $OLD_INSTANCE" | tee --append $LOG
    exit 1
fi
echo "Instance $OLD_INSTANCE is named $NAME" | tee --append $LOG

KEYPAIR=`retry ec2-describe-instances --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "instance-id=$OLD_INSTANCE" | tee --append $LOG | grep INSTANCE | awk '{print $7}'`
if test -z "$KEYPAIR"
then
    echo "Could not find keypair for instance $INSTANCE" | tee --append $LOG
    exit 1
fi
echo "Instance $OLD_INSTANCE is using keypair $KEYPAIR" | tee --append $LOG

SECURITY_GROUP=`retry ec2-describe-instances --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "instance-id=$OLD_INSTANCE" | tee --append $LOG | grep RESERVATION | awk '{print $4}'`
if test -z "$SECURITY_GROUP"
then
    echo "Could not find security group for instance $INSTANCE" | tee --append $LOG
    exit 1
fi
echo "Instance $OLD_INSTANCE is in security group $SECURITY_GROUP" | tee --append $LOG

OLD_VOLUME=`retry ec2-describe-volumes --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "attachment.instance-id=$OLD_INSTANCE" | tee --append $LOG | grep VOLUME | awk '{print $2}'`
if test -z "$OLD_VOLUME"
then
    echo "Could not find volume for instance $OLD_INSTANCE" | tee --append $LOG
    exit 1
fi
echo "Current $NAME volume is $OLD_VOLUME" | tee --append $LOG

SNAPSHOT=`retry ec2-describe-snapshots --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "tag:Name=$NAME" --filter "status=completed" | tee --append $LOG | awk '{print $5 "\t" $2}' | sort --reverse | head --lines=1 | awk '{print $2}'`
if test -z "$SNAPSHOT"
then
    echo "Could not find a snapshot of $NAME" | tee --append $LOG
    exit 1
fi
SNAPSHOT_DATE=`retry ec2-describe-tags --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "resource-id=$SNAPSHOT" --filter "key=Date" | tee --append $LOG | awk '{print $5}'`
echo "Using snapshot $SNAPSHOT from $SNAPSHOT_DATE" | tee --append $LOG

read -t 60 -p "Ready to begin. Hit ENTER or wait 60 seconds... "

# At this point we turn on error checking for ALL commands
set -e
set -o pipefail

AMI=`retry ec2-register --snapshot $SNAPSHOT --architecture x86_64 --name "$NAME" --description restore-$NAME-from-latest-backup --kernel $KERNEL --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG | awk '{print $2}'`
echo "Created AMI $AMI with kernel $KERNEL" | tee --append $LOG
retry ec2-create-tags $AMI --tag Name=$NAME --tag Date=$DATE --tag SnapshotDate=$SNAPSHOT_DATE --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Tagged AMI $AMI" | tee --append $LOG

# Use a token to ensure idempotency on retry
INSTANCE=`retry ec2-run-instances $AMI --client-token $CLIENT_TOKEN --availability-zone $AZ --instance-count 1 --group $SECURITY_GROUP --key $KEYPAIR --instance-type $INSTANCE_TYPE --kernel $KERNEL --disable-api-termination --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG | grep INSTANCE | awk '{print $2}'`
echo "Created instance $INSTANCE with kernel $KERNEL" | tee --append $LOG
retry ec2-create-tags $INSTANCE --tag Name=$NAME --tag Date=$DATE --tag Snapshot=$SNAPSHOT --tag SnapshotDate=$SNAPSHOT_DATE --tag OldInstance=$OLD_INSTANCE --tag OldVolume=$OLD_VOLUME --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Tagged instance $INSTANCE" | tee --append $LOG

retry ec2-monitor-instances $INSTANCE --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Enabled detailed monitoring for instance $INSTANCE" | tee --append $LOG

echo "Sleeping for 30 seconds..."
sleep 30

VOLUME=`retry ec2-describe-volumes --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter "attachment.instance-id=$INSTANCE" | tee --append $LOG | grep VOLUME | awk '{print $2}'`
echo "Instance $INSTANCE is using volume $VOLUME" | tee --append $LOG
retry ec2-create-tags $VOLUME --tag Name=$NAME --tag Date=$DATE --tag SnapshotDate=$SNAPSHOT_DATE --tag OldVolume=$OLD_VOLUME --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Tagged volume $VOLUME" | tee --append $LOG

EC2_CNAME=`retry ec2-describe-instances --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY --filter instance-id=$INSTANCE | tee --append $LOG | grep INSTANCE | awk '{print $4}'`
echo "Instance name is $EC2_CNAME" | tee --append $LOG

wget --tries=25 --retry-connrefused --append-output=$LOG --output-document=/dev/null http://$EC2_CNAME/ > /dev/null
if [ $? -ne 0 ]
then
    echo "Unable to access http://$EC2_CNAME/" | tee --append $LOG
    exit 1
fi
echo "Retrieved http://$EC2_CNAME/" | tee --append $LOG

read -p "$SITE: Ready to move EIP $ADDRESS to instance $EC2_CNAME. Hit ENTER... "

retry ec2-associate-address --instance $INSTANCE $ADDRESS --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Associated EIP $ADDRESS with instance $INSTANCE" | tee --append $LOG

wget --tries=25 --retry-connrefused --append-output=$LOG --output-document=/dev/null http://$ADDRESS/ > /dev/null
if [ $? -ne 0 ]
then
    echo "Unable to access http://$ADDRESS/" | tee --append $LOG
    exit 1
fi
echo "Retrieved http://$ADDRESS/" | tee --append $LOG

wget --tries=25 --retry-connrefused --append-output=$LOG --output-document=/dev/null http://$SITE/ > /dev/null
if [ $? -ne 0 ]
then
    echo "Unable to access http://$SITE/" | tee --append $LOG
    exit 1
fi
echo "Retrieved http://$SITE/" | tee --append $LOG

retry ec2-stop-instances --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY $OLD_INSTANCE | tee --append $LOG > /dev/null
echo "Stopping old $NAME instance ($OLD_INSTANCE)" | tee --append $LOG

retry ec2-create-tags $OLD_INSTANCE --tag Name=${NAME}-retired --tag RetiredDate=$DATE --tag NewInstance=$INSTANCE --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Tagged old instance $OLD_INSTANCE" | tee --append $LOG

retry ec2-create-tags $OLD_VOLUME --tag Name=${NAME}-retired  --tag RetiredDate=$DATE --tag NewInstance=$INSTANCE --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY | tee --append $LOG > /dev/null
echo "Tagged old volume $OLD_VOLUME" | tee --append $LOG

wget --tries=25 --retry-connrefused --append-output=$LOG --output-document=/dev/null http://$ADDRESS/ > /dev/null
if [ $? -ne 0 ]
then
    echo "Unable to access http://$ADDRESS/" | tee --append $LOG
    exit 1
fi
echo "Retrieved http://$ADDRESS/" | tee --append $LOG

wget --tries=25 --retry-connrefused --append-output=$LOG --output-document=/dev/null http://$SITE/ > /dev/null
if [ $? -ne 0 ]
then
    echo "Unable to access http://$SITE/" | tee --append $LOG
    exit 1
fi
echo "Retrieved http://$SITE/" | tee --append $LOG

# If the instance or olume doesn't have any alarms then grep won't find any
# matching rows. We don't want execution to end then so we turn off pipefail.
set +o pipefail
retry cloudwatch-describe-alarms | grep $OLD_INSTANCE | sed s/$OLD_INSTANCE/$INSTANCE/g | tee --append $LOG | /bin/bash > /dev/null
echo "Created CloudWatch alarms for instance $INSTANCE" | tee --append $LOG
retry cloudwatch-describe-alarms | grep $OLD_VOLUME | sed s/$OLD_VOLUME/$VOLUME/g | tee --append $LOG | /bin/bash > /dev/null
echo "Created CloudWatch alarms for volume $VOLUME" | tee --append $LOG
set -o pipefail

retry ec2-deregister --aws-access-key $MY_ACCESS_KEY --aws-secret-key $MY_SECRET_KEY $AMI | tee --append $LOG > /dev/null
echo "Deregistered AMI $AMI" | tee --append $LOG

echo "DONE" | tee --append $LOG
echo "Instance $INSTANCE started in $AZ" | tee --append $LOG
date >> $LOG
