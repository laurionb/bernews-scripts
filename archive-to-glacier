#!/bin/bash
NAME=bernews

export PATH=/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin:/root/bin
export EC2_HOME=/opt/aws/apitools/ec2
export JAVA_HOME=/usr/lib/jvm/jre

# Arguments are message, subject
publish_to_sns() {
    ARN=arn:aws:sns:us-east-1:150609428075:bernews-low-priority
    PYTHON_SCRIPT="import boto.sns,sys;print boto.sns.connect_to_region('us-east-1').publish(unicode(sys.argv[1]),unicode(sys.argv[2]),unicode(sys.argv[3]))"
    python -c "${PYTHON_SCRIPT}" ${ARN} "$1" "$2"
}

# Determine our instance, AZ and region
DATE=`date +%FT%H%M%S`
DEVICE=/dev/xvdf
INSTANCE=`ec2-metadata --instance-id | awk '{print $2}'`
AZ=`ec2-metadata --availability-zone | awk '{print $2}'`
REGION=`echo ${AZ} | sed 's/\(.*\).$/\1/'`

publish_to_sns "archiving latest snapshot of ${NAME} to Glacier from ${INSTANCE} in ${REGION}" "${NAME}: archive to Glacier started (${DATE})"

# Print the arguments
echo "    Name: ${NAME}"
echo "    Date: ${DATE}"
echo "Instance: ${INSTANCE}"
echo "  Region: ${REGION}"
echo "      AZ: ${AZ}"

# Find the most recent snapshot
echo "++++ find snapshot"
SNAPSHOT=`ec2-describe-snapshots --filter "tag:Name=${NAME}" --region ${REGION} | grep SNAPSHOT | grep completed | awk --field-separator '\t' '{printf("%s %s\n", $5, $2)}' | sort --numeric-sort --reverse | head -1 | awk '{print $2}'`
ec2-describe-snapshots ${SNAPSHOT} --region ${REGION}
SNAPSHOT_DESCRIPTION=`ec2-describe-snapshots ${SNAPSHOT} --region us-west-2 | cut -f9`
echo ${SNAPSHOT_DESCRIPTION}

# Create a volume from the snapshot
echo "++++ create volume"
VOLUME=`ec2-create-volume --snapshot ${SNAPSHOT} --availability-zone ${AZ} --region ${REGION} | grep VOLUME | awk '{print $2}'`
ec2-create-tags ${VOLUME} --tag "Name=${NAME}-restored" --tag "Date=${DATE}" --tag "Snapshot=${SNAPSHOT}" --tag "ForInstance=${INSTANCE}" --tag "CreatedBy=${USER}" --tag "CreatedOnHost=${HOSTNAME}" --region ${REGION} > /dev/null
ec2-describe-volumes ${VOLUME} --region ${REGION}

# Wait for the volume to be available
STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep VOLUME | cut -f6`
while [[ "${STATUS}" != "available" ]]; do
    sleep 10
    STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep VOLUME | cut -f6`
done
ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION}

# Attach the volume
ec2-attach-volume ${VOLUME} --instance ${INSTANCE} --device ${DEVICE} --region ${REGION}

# Wait for the volume to be attached
STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep ATTACHMENT | cut -f5`
while [[ "${STATUS}" != "attached" ]]; do
    sleep 10
    STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep ATTACHMENT | cut -f5`
done
ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION}

# fsck the device
echo "++++ fsck"
time fsck -a ${DEVICE}
if [ $? -gt 1 ]; then
    publish_to_sns "filesystem on ${VOLUME} created from ${SNAPSHOT} on ${INSTANCE}${DEVICE} is corrupt" "fsck failure"
    exit 1
fi

# Now mount the volume
echo "++++ mount"
MOUNTPOINT="/${SNAPSHOT}"
mkdir ${MOUNTPOINT}
mount --verbose --read-only ${DEVICE} ${MOUNTPOINT}
df -h ${MOUNTPOINT}

# Copy the contents to the ephemeral drive
echo "++++ archive"
LOCAL=/media/ephemeral0
ARCHIVE=${LOCAL}/${SNAPSHOT}.tar.gz
time tar -cvzf ${ARCHIVE} ${MOUNTPOINT} --exclude=${MOUNTPOINT}/var/www/html/tv
if [ $? -ne 0 ]; then
    publish_to_sns "tar of ${MOUNTPOINT} failed" "tar failure"
    exit 1
fi
ls -l -h ${ARCHIVE}
ARCHIVE_SIZE=`ls -l -h ${ARCHIVE} | awk '{print $5}'`

# Upload to Glacier
echo "++++ upload to Glacier"
PYTHON_SCRIPT="import boto.glacier,datetime,sys;print boto.glacier.connect_to_region(sys.argv[1]).create_vault(sys.argv[2]).concurrent_create_archive_from_file(sys.argv[3],sys.argv[3]+':'+sys.argv[4])"
VAULT="${NAME}-${DATE}-${SNAPSHOT}"
time python -c "${PYTHON_SCRIPT}" ${REGION} ${VAULT} ${ARCHIVE} "${SNAPSHOT_DESCRIPTION}"
if [ $? -ne 0 ]; then
    publish_to_sns "unable to upload ${ARCHIVE} (${ARCHIVE_SIZE},${SNAPSHOT_DESCRIPTION}) to Glacier vault ${VAULT} in ${REGION} from ${INSTANCE}" "glacier upload failure"
    exit 1
fi

# Unmount and detach the volume
echo "+++++ unmount, deteach and delete"
umount ${MOUNTPOINT}
ec2-detach-volume ${VOLUME} --instance ${INSTANCE} --device ${DEVICE} --force --region ${REGION}

# Wait for the volume to be available
STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep VOLUME | cut -f6`
while [[ "${STATUS}" != "available" ]]; do
    sleep 10
    STATUS=`ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION} | grep VOLUME | cut -f6`
done
ec2-describe-volumes ${VOLUME} --hide-tags --region ${REGION}

# Now delete the volume
ec2-delete-volume ${VOLUME} --region ${REGION}
if [ $? -ne 0 ]; then
    publish_to_sns "unable to delete volume ${VOLUME} in ${REGION} which was attached to ${INSTANCE}${DEVICE}" "volume deletion failure"
    exit 1
fi

# Send a success message
END_DATE=`date +%FT%H%M%S`
MESSAGE="A ${ARCHIVE_SIZE} backup of ${SNAPSHOT} (${SNAPSHOT_DESCRIPTION}) was uploaded to Glacier vault ${VAULT} in ${REGION} on ${END_DATE} (instance:${INSTANCE},volume:${VOLUME},az:${AZ},device:${DEVICE},date:${DATE})"
SUBJECT="${NAME}: archive to Glacier completed (${DATE})"
publish_to_sns "${MESSAGE}" "${SUBJECT}"

# Now terminate this instance
ec2-terminate-instances ${INSTANCE} --region ${REGION}
if [ $? -ne 0 ]; then
    publish_to_sns "unable to terminate instance ${INSTANCE} in ${REGION}" "instance termination failure"
    exit 1
fi
