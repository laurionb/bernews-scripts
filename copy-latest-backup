#!/usr/bin/python
import argparse
import boto
import boto.ec2
import os
import sys
import time
import urllib2

from datetime import datetime
from operator import attrgetter

"""Call a function, retrying on failures"""
def retry(f, retries=3):
    failures = 0
    while True:
        try:
            result = f()            
            return result
        except Exception as e:
            failures = failures + 1
            if failures > retries:
                raise         
            time.sleep(1)    
    
"""Call a boto connection function using the AWS environment variables. This supports both
ordinary and delegated credentials"""
def connect_to_ec2(region):
    if (None <> os.environ.get('AWS_DELEGATION_TOKEN')):
        return boto.ec2.connect_to_region(region, aws_access_key_id=os.environ['AWS_ACCESS_KEY'], aws_secret_access_key=os.environ['AWS_SECRET_KEY'], security_token = os.environ['AWS_DELEGATION_TOKEN'])
    elif (None <> os.environ.get('AWS_ACCESS_KEY')):
        return boto.ec2.connect_to_region(region, aws_access_key_id=os.environ['AWS_ACCESS_KEY'], aws_secret_access_key=os.environ['AWS_SECRET_KEY'])
    else:
        return boto.ec2.connect_to_region(region)

"""Parse the commandline"""
def parse_commandline():
    parser = argparse.ArgumentParser(description='Copy EBS snapshots to another region.')
    parser.add_argument('--source-region', default='us-east-1', help='The region the snapshot is in. Defaults to us-east-1.')
    parser.add_argument('--destination-region', default='us-west-2', help='The region the snapshot should be copied to. Defaults to us-west-2.')
    parser.add_argument('name', help='The name of the snapshot to copy (e.g. "monitoring").')
    parser.add_argument('keep', help='The number of snapshots to keep (e.g. 7).')
    args = parser.parse_args()
    return args

def main(args):
    args = parse_commandline()
    time = datetime.utcnow().isoformat()
    ec2_source = connect_to_ec2(args.source_region)
    ec2_destination = connect_to_ec2(args.destination_region)
    print 'copying latest %s snapshot from %s to %s, keeping %s' % (args.name, args.source_region, args.destination_region, args.keep)

    # Start the snapshot copy
    source_snapshots = retry(lambda: ec2_source.get_all_snapshots(filters={'tag:Name': args.name, 'status': 'completed'}))
    source_snapshots = sorted(source_snapshots, key=attrgetter('start_time'), reverse=True)
    snapshot_to_copy = source_snapshots[0]
    print 'latest snapshot is %s (%s)' % (snapshot_to_copy.id, snapshot_to_copy.description)
    snapshot_description = '%s [Copied %s from %s]' % (snapshot_to_copy.description, snapshot_to_copy.id, args.source_region)
    print 'copying snapshot \'%s\'' % snapshot_description
    snapshot_id = retry(lambda: ec2_destination.copy_snapshot(args.source_region, snapshot_to_copy.id, snapshot_description))
    print 'created snapshot %s' % (snapshot_id)
    retry(lambda: ec2_destination.create_tags([snapshot_id], {'Name': args.name}))

    # Delete any old snapshots
    old_snapshots = retry(lambda: ec2_destination.get_all_snapshots(filters={'tag:Name': args.name, 'status': 'completed'}))
    old_snapshots = sorted(old_snapshots, key=attrgetter('start_time'))
    to_delete = len(old_snapshots) - int(args.keep)
    for i in range(to_delete):
        print 'deleting snapshot %s \'%s\'' % (old_snapshots[i].id, old_snapshots[i].description)
        retry(lambda: old_snapshots[i].delete())

if __name__ == "__main__":
    main(sys.argv)
